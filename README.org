#+TITLE: Zero starts workflows.
#+STARTUP: showall
#+OPTIONS: H:0 num:0 toc:1

* Overview

  [[https://github.com/broadinstitute/zero.git][Zero]] is a workload manager.

  It runs as you,
  with your credentails,
  from your laptop,
  and communicates with other services
  as necessary to manage a workload.

  It can also be deployed
  to run as a service in the cloud.

  For more on Zero's role
  in the Terra infrastructure
  see [[./docs/terra.org][Zero's role in Terra]].

* Set up

  Run =boot build= at the top of a =zero.git= repo
  to build an uberjar.
  The resulting jar is in =./target/zero-*.jar=
  relative to the =zero.git= clone.

  With some start-up and performance penalty,
  you can also run zero as a script.
  See below for details.

  Zero expects to find =.wdl= files
  in a sister repo clone at =../dsde-pipelines/=
  relative to the Zero process's working directory.
  The easiest way to accomplish that
  is to clone both =zero.git= and =dsde-pipelines.git=
  into the same directory,
  then build =zero= from the top-level
  directory of the =zero.git= clone
  after selecting the commit of =dsde-pipelines=
  that you want to deploy.

* Versioning

  Zero needs to manage its version
  and the versions of =dsde-pipelines.git=
  which contribute the WDL files. There
  may be as many =dsde-pipelines.git= versions
  as there are workflow wdls.

  The =zero= jar includes a manifest
  with at least that information in it,
  and a version command that returns it.

* Role in Terra

  The Data Sciences Platform (DSP)
  is building a new system (around Terra)
  for storing and processing biological data.
  The system design includes a Data Repository
  where data is stored,
  and a Methods Repository
  that executably describes transformations
  on that data.

  In the new system,
  the DSP needs something
  to fulfill the role
  that Zamboni currently plays
  in our current infrastructure
  to support the Genomics Platform (GP).

  Zamboni watches various queues for messages
  describing new data and how to process it.
  Zamboni interprets those messages
  to dispatch work to workflow engines
  (running on the premises or in the loud)
  and monitors the progress of those workflows.
  The Zamboni web UI allows users
  to track the progress of workflows,
  and enables Ops engineers to debug problems
  and resume or restart failed workflows.
  Zamboni can run workflows
  on both a local Sun Grid Engine (SGE),
  and on Cromwell on premises and in the cloud.

* Capabilities

  When Zero is on-premises or in the cloud,
  it can currently talk to the following services:

  |-----------------------------+-------------+----------|
  | service                     | on premises | in cloud |
  |-----------------------------+-------------+----------|
  | Clio                        | x           | x        |
  | Cloud SQL                   | x           | x        |
  | Cromwell                    | x           | x        |
  | Google App Engine           | x           | x        |
  | Google Cloud Platform Admin | x           | x        |
  | Google Cloud Pub/Sub        | x           | x        |
  | Google Cloud Storage        | x           | x        |
  | JMS                         | x           |          |
  | Mercury                     | x           |          |
  | Oracle DB                   | x           |          |
  | SMTP (mail)                 | x           | x        |
  | Vault                       | x           | x        |
  | Zero                        |             | x        |
  |-----------------------------+-------------+----------|

  Zero has a diagnostic mode, =dx=, which leverages Cromwell
  metadata to expose useful workflow information.

  Run =zero dx= to get a list of the diagnostics available.

  #+BEGIN_EXAMPLE
  wm28d-f87:zero yanc$ java -jar ./target/zero-20190409-5.jar dx

  zero dx: tools to help debug workflow problems.

  Usage: zero dx <tool> [<arg> ...]
  Where: <tool> is the name of some diagnostic tool.
         <arg> ... are optional arguments to <tool>.

  The <tool>s and their <arg>s are named here.
    all-metadata environment & ids
      All workflow metadata for IDS from Cromwell in ENVIRONMENT.
    event-timing environment id
      Time per event type for workflow with ID in ENVIRONMENT.
  ...
  Error: Must specify a dx <tool> to run.
  BTW: You ran: zero dx
  wm28d-f87:zero yanc$
  #+END_EXAMPLE

* Implementation

  The initial file structure looks like this.

  #+BEGIN_EXAMPLE
  tbl@wm97a-c2b ~/Broad/zero # tree .
  .
  ├── README.org
  ├── boot.properties
  ├── build.boot
  ├── build.txt
  ├── docs
  │   └── server.md
  ├── ops
  │   ├── deploy.sh
  │   └── server.sh
  ├── resources
  │   └── simplelogger.properties
  ├── src
  │   └── zero
  │       ├── clio.clj
  │       ├── cromwell.clj
  │       ├── db.clj
  │       ├── debug.clj
  │       ├── drs.clj
  │       ├── dx.clj
  │       ├── environments.clj
  │       ├── gcs.clj
  │       ├── jms.clj
  │       ├── main.clj
  │       ├── mercury.clj
  │       ├── metadata.clj
  │       ├── once.clj
  │       ├── pubsub.clj
  │       ├── server.clj
  │       ├── server_debug.clj
  │       ├── starter.clj
  │       ├── sv.clj
  │       ├── ukb.clj
  │       ├── util.clj
  │       ├── wdl.clj
  │       ├── wgs.clj
  │       ├── workflow.clj
  │       ├── xx.clj
  │       └── zero.clj
  └── test
      └── zero
          ├── gcs_test.clj
          └── pubsub_test.clj
  7 directories, 36 files
  tbl@wm97a-c2b ~/Broad/zero #
  #+END_EXAMPLE

** Top-level files

   After cloning a new Zero repo,
   the top-level files are.

   - =./README.org= is this file.

   - =./boot.properties= overrides some defaults in =boot-clj=.
     (=boot.properties= is something like =build.properties= for =sbt=.)

   - =./build.boot= is a Clojure script to bootstrap Zero with =boot-clj=.

   - =./build.txt= holds a monotonically increasing integer
     for build versioning.

   - =./docs= has ancillary documentation.

   - =./ops= is a directory of standard scripts to support operations.
     It includes scripts to deploy the server in Google App Engine,
     and to run it locally for easier debugging.
     (See [[./docs/server.md]] for more information.)

   - =./resources= contains the =simplelogger= properties
     and files staged from other repositories
     that need to be on the Java classpath
     when running from the =.jar= file.

   - =./src/zero= contains the Zero source code.

   - =./test/zero= contains some unit tests.

   After building and working with Zero a while,
   you may notice a couple of other
   top-level files and directories.

   - =./project.clj= is a =lein= project file to support IntelliJ.

   - =./zero= is a link to =build.boot= that runs Zero as a script.

   Run =boot build= at least once after cloning the repo
   to make sure all the necessary files are in place.

** Source code

   The Clojure source code is in the =./src/zero= directory.

   The entry point for the Zero executable
   is the =-main= function in =main.clj=.
   It takes the command line arguments as strings,
   validates the arguments,
   then launches the appropriate process.

   The =server.clj= file implements the Zero server.
   The =server_debug.clj= file adds some tools
   to aid in debugging the server.

   Some hacks specific to Zero are in =zero.clj=.

   The =boot.clj= offloads code from the =build.boot=
   file for easier development and debugging.

   The =debug.clj= file defines some macros
   useful when debugging or logging.

   The =util.clj= file contains a few function and macros
   used in Zero that are not specific to its function.

   The =environments.clj= file
   defines configuration parameters
   for different execution contexts.

   The =workflow.clj= file is a Cromwell command-line client.

   The =ukb.clj= file
   implements a command-line starter
   for the *White Album*,
   *Pharma5*,
   or *UK Biobank* project.

   The =xx.clj= file implements a command-line starter
   for reprocessing /eXternal eXomes/.

   The =sv.clj= file implements a workload manager
   to support the *Structural Variation* project.

   The =metadata.clj= file implements a tool
   to extract metadata from Cromwell
   that can be archived with the outputs
   generated by a workflow.

   The =dx.clj= file
   implements miscellaneous pipeline debugging tools.

   The =once.clj= file
   defines some initialization functions
   mostly supporting authentication.

   The =wgs.clj= file
   helps start Whole Genome Shotgun pipelines.

   Each of the other source files implement an interface
   to one of the services Zero talks to,
   and are named accordingly.

   |--------------+-------------------------------------------|
   | File         | Service                                   |
   |--------------+-------------------------------------------|
   | clio.clj     | Clio metadata manager                     |
   | cromwell.clj | Cromwell workflow runner                  |
   | db.clj       | On-prem and Cloud SQL databases           |
   | gcs.clj      | Google Cloud Storage                      |
   | jms.clj      | Java Message Service queues               |
   | mercury.clj  | Mercury Lab Information Management System |
   | postgres.clj | Cloud SQL postgres databases              |
   | pubsub.clj   | Google Cloud Pub/Sub                      |
   | server.cljs  | the Zero server itself                    |
   | wdl.clj      | parse WDL and manage dependencies         |
   |--------------+-------------------------------------------|

   The =starter.clj= file is a stub implementation
   of an on-prem workflow starter
   that tests most of the service interfaces
   described in that table.

** Test code

   There are some unit tests under =./test/zero/=.

   |-----------------+----------------------------|
   | File            | Test the namespace         |
   |-----------------+----------------------------|
   | gcs_test.clj    | zero.gcs    in gcs.clj     |
   | pubsub_test.clj | zero.pubsub in pubsub.clj  |
   |-----------------+----------------------------|

* Development

  Zero is implemented in [[https://clojure.org][Clojure]]
  and uses a tool named =boot= or =boot-clj=
  to manage dependencies and so on.
  The =boot= tool is a Clojure bootstrapper:
  it's job is to turn a standard Linux,
  MacOS, or Windows process
  into something that can host a Clojure program.

  Zero uses a =gcloud auth= command line
  to authenticate the user.
  You need to be authenticated to Google Cloud
  and have a recent version of =google-cloud-sdk=
  in your path to run =zero= or its jar successfully.
  I verified that =Google Cloud SDK 161.0.0= works.
  That or any later version should be OK.

** Cheatsheets

   I find a cheatsheet handy
   when programming in Clojure.
   There are a bunch.
   Bookmark or print one.

   - https://clojure.org/api/cheatsheet
   - https://www.conj.io/ (... used to be called Grimoire ...)
   - https://github.com/jafingerhut/clojure-cheatsheets/tree/master/pdf
   - http://cljs.info/cheatsheet/ (ClojureScript)
   - https://github.com/jafingerhut/clojure-cheatsheets (sources)

   These may also be handy.

   - [[https://github.com/yogthos/clojure-error-message-catalog][Clojure Error Messages]]
   - [[https://clojure.org/guides/weird_characters]["Weird" Characters in Clojure]]

** Installation

   See [[https://github.com/boot-clj/boot#install][this link]] to install =boot-clj=.

   Running =boot= is enough to "install" Clojure.

   There is another tool like =boot= named =lein=,
   which is short for "[[https://leiningen.org/][Leiningen]]".
   You currently need =lein= to develop with [[https://www.jetbrains.com/idea/][IntelliJ]]
   using its Clojure plugin [[https://cursive-ide.com/][Cursive]].

   On MacOS, I suggest installing [[http://brew.sh/][Homebrew]]
   and then running this.

   #+BEGIN_EXAMPLE
   zero # brew install boot-clj leiningen
   ==> Using the sandbox
   ==> Downloading https://github.com/boot-clj/boot-bin/releases/download/2.5.2/boot
   🍺  /usr/local/Cellar/boot-clj/2.5.2: 3 files, 7.7K, built in 2 seconds
   ...
   zero #
   #+END_EXAMPLE

   You can =brew install maven=,
   and =java= too if necessary.

   There are =boot-clj= and =lein= distributions
   for all the common OS platforms.
   Each tool is just a file.
   Copy them into your =PATH=,
   run them once to bootstrap them,
   and you're done.
   (The first run of each tool
   downloads dependencies and so on.)

   The =build.boot= file is equivalent
   to the =build.sbt= file
   for SBT in Scala projects.
   It specified project dependencies
   and the build and release pipeline.
   It also functions as a script
   for running and testing the project
   without a separate compilation step.

** Hacking

   Clojure development feels very different
   from Scala and Java development.
   It even differs markedly from development
   in other /dynamic languages/ such as Python or Ruby.

   Get a demonstration from someone familiar
   with Clojure development
   before you spend too much time
   trying to figure things out on your own.

   Find a local Cursive user for guidance
   if you like IntelliJ.
   [[mailto:jcarey@broadinstitute.org][Jay Carey]] and [[mailto:yanc@broadinstitute.org][Charley Yan]] know how to use it.
   There are [[https://broadinstitute.atlassian.net/wiki/spaces/DSDE/pages/48234557/Software%2BLicenses%2B-%2BCursive][Cursive licenses here]].
   There is also a [[https://marketplace.visualstudio.com/items?itemName=betterthantomorrow.calva][Calva]] plugin
   for [[https://code.visualstudio.com/][Visual Studio Code]].

   I hack Clojure in Emacs using [[https://cider.readthedocs.io/][CIDER]] and [[https://github.com/clojure/tools.nrepl][nREPL]].
   CIDER is not trivial to set up,
   but not /especially/ difficult
   if you are used to Emacs.
   (I can help if CIDER gives you trouble.)

   Every time =boot= runs,
   it generates a =project.clj= file
   to support =lein=,
   Cursive,
   and Calva users.

   Running =boot build= will not only
   build a fat jar (/uberjar/) for the Zero project,
   but will add an executable symbolic link =zero=
   to conveniently execute the Clojure code as a script.

** Testing

   If you've never run =boot= before,
   you may have to run it twice:
   first to bootstrap Clojure and =boot= itself,
   and again to download their and Zero's dependencies.

   The first =boot build= run
   will create a =./zero= link
   to the =build.boot= file

   #+BEGIN_EXAMPLE
   ./zero starter dev $USER@broadinstitute.org
   #+END_EXAMPLE

   You should eventually receive
   an humongous email from =zero@broadinstitute.org=
   containing evidence of Zero's adventures.

   The result should look something like this.

   #+BEGIN_EXAMPLE
   tbl@wm97a-c2b ~/Tmp # brew install boot-clj
   Warning: boot-clj 2.7.2 is already installed
   tbl@wm97a-c2b ~/Tmp # which boot
   /usr/local/bin/boot
   tbl@wm97a-c2b ~/Tmp # ls
   tbl@wm97a-c2b ~/Tmp # git clone https://github.com/broadinstitute/zero.git
   Cloning into 'zero'...
   remote: Counting objects: 456, done.
   remote: Compressing objects: 100% (59/59), done.
   remote: Total 456 (delta 62), reused 98 (delta 44), pack-reused 337
   Receiving objects: 100% (456/456), 71.27 KiB | 663.00 KiB/s, done.
   Resolving deltas: 100% (214/214), done.
   tbl@wm97a-c2b ~/Tmp # ls
   zero
   tbl@wm97a-c2b ~/Tmp # cd ./zero
   tbl@wm97a-c2b ~/Tmp/zero # ls
   README.org      build.boot      src
   tbl@wm97a-c2b ~/Tmp/zero # boot build
   Compiling 1/1 zero.main...
   Adding uberjar entries...
   Writing pom.xml and pom.properties...
   Writing zero-20190409-5.jar...
   Writing target dir(s)...
   tbl@wm97a-c2b ~/Tmp/zero # ls
   README.org      build.boot         project.clj
   src             target             zero
   tbl@wm97a-c2b ~/Tmp/zero # ./zero starter
   zero: Error: Must specify an environment.
   zero: The valid environments are:
     cromwellv36
       Test Cromwell v36 for PAPIv2 requester pays
     cromwellv38
       Test Cromwell v38 for PAPIv2 requester pays
     dev
       Development
     hca
       HCA/DCP Lira and Falcon for the Mint team
     pharma5
       Pharma5 WhiteAlbum UK Biobank, UKB, whatever for ukb.clj
     prod
       Production (gotc-prod)
     staging
       Staging
   Zero: zero Email a report from all systems.
   Usage: zero starter <env> [<to> ...]
   Where: <env> is the runtime environment.
          <to> ... are email addresses of recipients.
   zero: Error: Must specify an environment.
   BTW: You ran: zero starter
   tbl@wm97a-c2b ~/Tmp/zero # ./zero starter dev $USER@broadinstitute.org
   SLF4J: Failed to load class "org.slf4j.impl.StaticLoggerBinder".
   SLF4J: Defaulting to no-operation (NOP) logger implementation
   SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.
   ... just inSANE spilling of debug logs ...
   tbl@wm97a-c2b ~/Tmp/zero #
   #+END_EXAMPLE

   Of course,
   after =boot build=,
   you can also run zero from its JAR file.

   #+BEGIN_EXAMPLE
   tbl@wm97a-c2b ~/Broad/zero # boot build
   Compiling 1/1 zero.main...
   Adding uberjar entries...
   Writing pom.xml and pom.properties...
   Writing zero-20190409-5.jar...
   Writing target dir(s)...
   tbl@wm97a-c2b ~/Broad/zero # java -jar ./target/zero-20190409-5.jar
   ...
   tbl@wm97a-c2b ~/Broad/zero 1#
   #+END_EXAMPLE

** Rich Comments

   Some Clojure source files have =(comment ...)= forms
   at the bottom.

   #+BEGIN_EXAMPLE
   tbl@wm97a-c2b ~/Broad/zero # tail ./src/zero/db.clj ./src/zero/main.clj
   ==> ./src/zero/db.clj <==
                 {:connection-uri (metrics-sql-url environment)}
                 db-spec)
               :user username :password password) sql)))

   (comment
     (query [:on-prem-picard :dev]
            "select count (*) from picard.res_proj_agg_override")
     (query [:cloud-metrics :dev]
            "SELECT COUNT(*) FROM EXOME_METRICS")
     )

   ==> ./src/zero/main.clj <==
     (-main "write-inputs")
     (-main "write-inputs" "WF=ExomeGermlineSingleSample" "FGBN=FGBN" "S=S"
            "REF=./reference.json" "CON_REF=./reference_contamination.json"
            (str "UBAMS=" ubam))
     (-main "write-inputs" "WF=ExomeGermlineSingleSample" "FGBN=FGBN" "S=S"
            "REF=./reference.json" "CON_REF=./reference_contamination.json"
            (str "UBAMS=" ubam) "O=./o.json")
     (-main "run-starter" "ENV=dev" "VERBOSITY=fnord" "fnord")
     (-main "run-starter" "EMAIL=tbl@broadinstitute.org")
     )
   tbl@wm97a-c2b ~/Broad/zero #
   #+END_EXAMPLE

   They permit fast testing of code changes
   by storing expressions that you can evaluate
   in your editor buffer.

   Feel free to add,
   edit,
   or augment them
   as you see fit.

** Documentation

   This file is in [[http://orgmode.org/]["Org mode"]]
   a structured editing and markup tool
   much like Markdown or "ReSTructured Text".

* Exomes in the Cloud Resources

  From [[https://docs.google.com/a/broadinstitute.org/document/d/1g8EmPjOZl-DzHlypXeOjKHzI4ff1LvzBiigDbZTy1Cs/edit?usp=sharing][Hybrid Selection in the Cloud V1]]

** Clients

  - [[https://cloud.google.com/storage/docs/reference/libraries#client-libraries-install-java][Google Cloud Storage Client Library (Java)]]

  - [[https://googlecloudplatform.github.io/google-cloud-java/0.30.0/index.html][Google Cloud Client Library for Java]]

** Diagrams

  - [[https://confluence.broadinstitute.org/download/attachments/39552724/ZamboniOverview.pdf][Zamboni Overview]]

** Sources

   - /Users/tbl/Broad/zamboni/Client/src/scala/org/broadinstitute/zamboni/client/lightning/clp/Lightning.scala
   - /Users/tbl/Broad/picard-private/src/java/edu/mit/broad/picard/lightning
   - /Users/tbl/Broad/gppipeline-devtools/release_client
   - /Users/tbl/Broad/gppipeline-devtools/starter_control
   - /picard02:/seq/pipeline/gppipeline-devtools/current/defs/prod.defs

* Cruft

  There are some versioning notes
  in =gs://broad-pharma5-ukbb-outputs/README.txt=
  from early in the UK Biobank project.

  The *Structural Variation* project
  used /unreleased/ WDL files
  from the =/tbl/mw_sv/= branch
  of [[https://github.com/broadinstitute/dsde-pipelines/tree/tbl/mw_sv][dsde-pipelines]].

-------
* Source
  https://github.com/broadinstitute/zero/blob/master/README.org
  #+NAME: git-commit-ref
  #+BEGIN_SRC emacs-lisp :exports none :tangle no
  (substring (shell-command-to-string "git branch --list -v -r") 0 -1)
  #+END_SRC
  #+NAME: git-repo
  #+BEGIN_SRC emacs-lisp :exports none :tangle no
  (substring (shell-command-to-string "git config --get remote.origin.url") 0 -1)
  #+END_SRC
  - =README.org=
  - call_git-repo()
  - call_git-commit-ref()
