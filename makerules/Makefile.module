# Module targets

ifndef MODULE
$(error MODULE was not defined - please invoke make from top level)
endif

# Directories
PROJECT_DIR         ?= $(shell dirname $(CURDIR))
MODULE_DIR          := $(PROJECT_DIR)/$(MODULE)
DERIVED_DIR         ?= $(PROJECT_DIR)/derived
SECOND_PARTY_DIR    := $(DERIVED_DIR)/2p
DERIVED_MODULE_DIR  := $(DERIVED_DIR)/$(MODULE)
export WFL_VERSION	?= $(shell $(CAT) $(PROJECT_DIR)/version)

# Top level `make` targets for the module
MAKE_TARGETS := prebuild lint build test images

# Timestamps for the top level make targets.
# Write your module make-targets against these
PREBUILD   := $(DERIVED_MODULE_DIR)/prebuild.$(TS)
LINT       := $(DERIVED_MODULE_DIR)/lint.$(TS)
BUILD      := $(DERIVED_MODULE_DIR)/build.$(TS)
CHECK      := $(DERIVED_MODULE_DIR)/check.$(TS)
IMAGES     := $(DERIVED_MODULE_DIR)/images.$(TS)

.PHONY:	all $(MAKE_TARGETS)
all: $(MAKE_TARGETS)

# Configure `make` dependencies via their timestamps.
$(PREBUILD): | $(DERIVED_MODULE_DIR)
$(LINT):     $(PREBUILD)
$(BUILD):    $(PREBUILD)
$(CHECK):    $(BUILD)
$(IMAGES):   $(BUILD)

# Top level `make` targets depend on their corresponding timestamp.
$(MAKE_TARGETS): % : $(DERIVED_MODULE_DIR)/%.$(TS)
	@$(ECHO) $(MODULE) $@ finished on $(shell $(DATE))

# We use a pattern instead $(TIMESTAMPS) to allow module.mk to override
# the default recipe.
$(DERIVED_MODULE_DIR)/%.$(TS):
	@$(TOUCH) $@

CLEAN_DIRS  := $(DERIVED_MODULE_DIR)
CLEAN_FILES :=
.PHONY:	clean
clean:
	$(RM) -r $(CLEAN_DIRS)
	$(RM) $(CLEAN_FILES)

define invoke
  $(MAKE) -f $(firstword $(MAKEFILE_LIST))
endef

.PHONY: help
help:
	@$(invoke) --print-data-base --question no-such-target | \
		$(GREP) -v -e '^no-such-target' -e '^Makefile' |   \
		$(AWK) '/^[^.%][-A-Za-z0-9_]*:/                    \
		    { print substr($$1, 1, length($$1)-1) }' |     \
		$(SORT) |                                          \
		$(PR) --omit-pagination --width=80 --columns=4     \

$(DERIVED_DIR) $(SECOND_PARTY_DIR) $(DERIVED_MODULE_DIR):
	@$(MKDIR) $@

# 2p Repositories
SECOND_PARTY_REPOSITORIES := \
  $(patsubst %, $(SECOND_PARTY_DIR)/%.$(TS),$(REQUIRED_BROAD_REPOSITORIES))

define make-github-url
  $(strip \
  	$(subst NAME,$(patsubst $(SECOND_PARTY_DIR)/%.$(TS),%,$@),\
	  $(if $(GITHUB_ACTOR),\
		"git@NAME.github.com:broadinstitute/NAME.git",\
  		"git@github.com:broadinstitute/NAME.git")))
endef

$(PREBUILD): $(SECOND_PARTY_REPOSITORIES)
$(SECOND_PARTY_REPOSITORIES): | $(SECOND_PARTY_DIR)
	$(GIT) clone $(make-github-url) $(patsubst %.$(TS),%,$@)
	@$(TOUCH) $@

# Python environment:
# usage $(call make-python-environment, env, requirements.txt)
define make-python-environment
	$(PYTHON) -m venv $1
	(                                           \
		$(SOURCE) $1/bin/activate;              \
		$(PYTHON) -m pip install --upgrade pip; \
		$(PYTHON) -m pip install -r $2;         \
	)
endef
