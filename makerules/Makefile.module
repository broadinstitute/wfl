# Module targets

ifndef MODULE
$(error MODULE was not defined - please invoke make from top level)
endif

include $(MAKE_INCLUDE_DIR)/common.mk

# Directories
PROJECT_DIR         ?= $(shell dirname $(CURDIR))
MODULE_DIR          := $(PROJECT_DIR)/$(MODULE)
DERIVED_DIR         ?= $(PROJECT_DIR)/derived
SECOND_PARTY_DIR    := $(DERIVED_DIR)/2p
DERIVED_MODULE_DIR  := $(DERIVED_DIR)/$(MODULE)
export WFL_VERSION	?= $(shell $(CAT) $(PROJECT_DIR)/version)

# Top level `make` targets for the module
MAKE_TARGETS := prebuild lint build check images

# Time stamps for the top level make targets in a loose order of their timeings.
# Implementers should write module make-targets against these, ensuring that
# the time stamp is touched as the last action.
# Example:
# $(LINT): $(SCM_SRC) $(TEST_SCM_SRC)
# 	$(PYTHON) -m pylint $(PYLINT_OPTIONS)
# 	@$(TOUCH) $@

PREBUILD   := $(DERIVED_MODULE_DIR)/prebuild.$(TS)
LINT       := $(DERIVED_MODULE_DIR)/lint.$(TS)
BUILD      := $(DERIVED_MODULE_DIR)/build.$(TS)
CHECK      := $(DERIVED_MODULE_DIR)/check.$(TS)
IMAGES     := $(DERIVED_MODULE_DIR)/images.$(TS)

.PHONY:	all $(MAKE_TARGETS)
all: $(MAKE_TARGETS)

# Configure `make` dependencies via their time stamps.
$(PREBUILD): | $(DERIVED_MODULE_DIR)
$(LINT):     $(PREBUILD)
$(BUILD):    $(PREBUILD)
$(CHECK):    $(BUILD)
$(IMAGES):   $(BUILD)

# Top level `make` targets depend on their corresponding time stamp.
$(MAKE_TARGETS): % : $(DERIVED_MODULE_DIR)/%.$(TS)
	@$(ECHO) $(MODULE) $@ finished on $(shell $(DATE))

# Use a pattern instead of the actual time stamps to allow module.mk
# implementers to override the default recipe.
$(DERIVED_MODULE_DIR)/%.$(TS):
	@$(TOUCH) $@

CLEAN_DIRS  := $(DERIVED_MODULE_DIR)
CLEAN_FILES :=
.PHONY:	clean
clean:
	$(RM) $(CLEAN_FILES)
	$(RM) -r $(CLEAN_DIRS)

define invoke
  $(MAKE) -f $(firstword $(MAKEFILE_LIST))
endef

.PHONY: help
help:
	@$(call brief-help, $(MODULE_DIR)/module.mk)

$(DERIVED_DIR) $(SECOND_PARTY_DIR) $(DERIVED_MODULE_DIR):
	@$(MKDIR) $@

# 2p repository time stamps
SECOND_PARTY_REPOSITORIES := \
  $(patsubst %, $(SECOND_PARTY_DIR)/%.$(TS),$(REQUIRED_BROAD_REPOSITORIES))

CLEAN_DIRS += $(subst .$(TS),,$(SECOND_PARTY_REPOSITORIES))
CLEAN_FILES += $(SECOND_PARTY_REPOSITORIES)

define make-github-url
$(strip \
  $(if $(GITHUB_ACTOR),\
    git@$*.github.com:broadinstitute/$*.git,\
    git@github.com:broadinstitute/$*.git))
endef

$(PREBUILD): $(SECOND_PARTY_REPOSITORIES)
$(SECOND_PARTY_REPOSITORIES): | $(SECOND_PARTY_DIR)
$(SECOND_PARTY_REPOSITORIES): $(SECOND_PARTY_DIR)/%.$(TS):
	$(GIT) clone $(make-github-url) $(SECOND_PARTY_DIR)/$*
	@$(TOUCH) $@

# Python environment:
# usage $(call make-python-environment, env, requirements.txt)
define make-python-environment
	$(PYTHON) -m venv $1;                   \
	$(SOURCE) $1/bin/activate;              \
	$(PYTHON) -m pip install --upgrade pip; \
	$(PYTHON) -m pip install -r $2;
endef
