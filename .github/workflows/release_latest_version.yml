name: Release Latest Version

on:
  push:
    branches:
      - master
    paths:
      - version

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      MODULES: api ui ops

    steps:
      - uses: actions/checkout@v2

      - name: Configure Git
        run: |
          git config --local user.email "$(git log --format='%ae' HEAD^!)"
          git config --local user.name "$(git log --format='%an' HEAD^!)"

      - name: Setup Java
        uses: actions/setup-java@v1
        with:
          java-version: '11'

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.7'

      - name: Setup Clojure
        uses: DeLaGuardo/setup-clojure@2.0
        with:
          tools-deps: '1.10.1.469'
          boot: 2.8.3

      - name: Configure SSH Keys
        run: |
          mkdir -p ~/.ssh

          echo "${{ secrets.dsde_pipelines_deploy_key }}" > ~/.ssh/dsde_pipelines_deploy_key
          echo "${{ secrets.pipeline_config_deploy_key }}" > ~/.ssh/pipeline_config_deploy_key
          echo "${{ secrets.wfl_deploy_key }}" > ~/.ssh/wfl_deploy_key

          chmod 600 ~/.ssh/dsde_pipelines_deploy_key
          chmod 600 ~/.ssh/pipeline_config_deploy_key
          chmod 600 ~/.ssh/wfl_deploy_key

          echo """
           Host dsde-pipelines.github.com
           HostName github.com
           User git
           IdentityFile ~/.ssh/dsde_pipelines_deploy_key

           Host pipeline-config.github.com
           HostName github.com
           User git
           IdentityFile ~/.ssh/pipeline_config_deploy_key

           Host wfl.github.com
           HostName github.com
           User git
           IdentityFile ~/.ssh/wfl_deploy_key """ > ~/.ssh/config

      - name: Docker Login
        run: |
          docker login \
            --username "${{ secrets.dockerhub_username }}" \
            --password "${{ secrets.dockerhub_password }}"

        # Get secret from vault
      - name: Authenticate to GCloud
        id: gcloud
        env:
          ROLE_ID: ${{ secrets.ROLE_ID }}
          SECRET_ID: ${{ secrets.SECRET_ID }}
          VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
        run: |
          # get vault token using role-id and secret-id
          VAULT_TOKEN=$(curl \
              --request POST \
              --data "{\"role_id\":\"${ROLE_ID}\",\"secret_id\":\"${SECRET_ID}\"}" \
              ${VAULT_ADDR}/v1/auth/approle/login | jq -r .auth.client_token)
          if [ -z "${VAULT_TOKEN}" ] ; then
            echo "Vault authentication failed!"
            exit 1
          fi
          echo ::add-mask::${VAULT_TOKEN}
          echo ::set-env name=VAULT_TOKEN::${VAULT_TOKEN}
          echo ${VAULT_TOKEN} > ~/.vault-token
          # use vault token to read secret - service account json
          curl --silent -H "X-Vault-Token: ${VAULT_TOKEN}" -X GET \
              ${VAULT_ADDR}/v1/secret/dsde/gotc/dev/wfl/wfl-non-prod-service-account.json \
              | jq .data > sa.json
          if [ ! -s sa.json ] ; then
            echo "Retrieval of Gcloud SA credentials failed"
            exit 1
          fi
          # auth as service account
          gcloud auth activate-service-account --key-file=sa.json
          if [ $? -ne 0 ] ; then
            echo "Gcloud auth failed!"
            exit 1
          fi
          # get bearer token and set it to a specific env var that
          #   subsequent steps expect.  bearer token good for 1 hour
          GOOGLE_OAUTH_ACCESS_TOKEN=$(gcloud auth print-access-token)
          if [ -z "${GOOGLE_OAUTH_ACCESS_TOKEN}" ] ; then
            echo "Generating Gcloud access token failed"
            exit 1
          fi
          echo ::add-mask::${GOOGLE_OAUTH_ACCESS_TOKEN}
          echo ::set-env name=GOOGLE_OAUTH_ACCESS_TOKEN::${GOOGLE_OAUTH_ACCESS_TOKEN}

      - name: Pre-Build
        run: make MODULES="${MODULES}" TARGET=prebuild

      - name: Build
        run: make MODULES="${MODULES}" TARGET=build

      - name: Check
        run: make MODULES="${MODULES}" TARGET=check

      - name: Images
        run: make MODULES="${MODULES}" TARGET=images

      - name: tag-and-push-images
        run: ./ops/cli.py tag-and-push-images
