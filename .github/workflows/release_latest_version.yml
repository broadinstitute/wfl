name: Release Latest Version

on:
  workflow_dispatch:
    inputs:
      ref:
        description: branch, tag or SHA to checkout.
        required: false
        default: 'main'

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:11
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432
    env:
      MODULES: api ui cloud_function

    steps:
      - name: prepare sources
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.ref }}

      - name: Configure Git
        run: |
          git config --local user.email "$(git log --format='%ae' HEAD^!)"
          git config --local user.name "$(git log --format='%an' HEAD^!)"

      - name: Setup Java
        uses: actions/setup-java@v1
        with:
          java-version: '11'

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.7'

      - name: Install Python Dependencies
        run: python -m pip install -r ops/requirements.txt

      - name: Setup Clojure
        uses: DeLaGuardo/setup-clojure@e73bf2b6435244b2c9c5c226ae5022d91d0ce702
        with:
          cli: '1.10.1.739'

      - name: Configure SSH Keys
        run: |
          mkdir -p ~/.ssh

          echo "${{ secrets.pipeline_config_deploy_key }}" > ~/.ssh/pipeline_config_deploy_key
          echo "${{ secrets.warp_deploy_key }}" > ~/.ssh/warp_deploy_key
          echo "${{ secrets.wfl_deploy_key }}" > ~/.ssh/wfl_deploy_key

          chmod 600 ~/.ssh/pipeline_config_deploy_key
          chmod 600 ~/.ssh/warp_deploy_key
          chmod 600 ~/.ssh/wfl_deploy_key

          cat << EOF > ~/.ssh/config
            Host pipeline-config.github.com
            HostName github.com
            User git
            IdentityFile ~/.ssh/pipeline_config_deploy_key

            Host warp.github.com
            HostName github.com
            User git
            IdentityFile ~/.ssh/warp_deploy_key

            Host wfl.github.com
            HostName github.com
            User git
            IdentityFile ~/.ssh/wfl_deploy_key
          EOF

      - name: Docker Login
        run: |
          docker login \
            --username "${{ secrets.dockerhub_username }}" \
            --password "${{ secrets.dockerhub_password }}"

        # Get secret from vault
      - name: Authenticate to GCloud
        id: gcloud
        env:
          ROLE_ID: ${{ secrets.ROLE_ID }}
          SECRET_ID: ${{ secrets.SECRET_ID }}
          VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
        run: |
          # get vault token using role-id and secret-id
          VAULT_TOKEN=$(curl \
              --request POST \
              --data "{\"role_id\":\"${ROLE_ID}\",\"secret_id\":\"${SECRET_ID}\"}" \
              ${VAULT_ADDR}/v1/auth/approle/login | jq -r .auth.client_token)
          if [ -z "${VAULT_TOKEN}" ] ; then
            echo "Vault authentication failed!"
            exit 1
          fi
          echo ::add-mask::${VAULT_TOKEN}
          echo "VAULT_TOKEN=${VAULT_TOKEN}" >> $GITHUB_ENV
          echo ${VAULT_TOKEN} > ~/.vault-token
          # use vault token to read secret - service account json
          curl --silent -H "X-Vault-Token: ${VAULT_TOKEN}" -X GET \
              ${VAULT_ADDR}/v1/secret/dsde/gotc/dev/wfl/wfl-non-prod-service-account.json \
              | jq .data > sa.json
          if [ ! -s sa.json ] ; then
            echo "Retrieval of Gcloud SA credentials failed"
            exit 1
          fi
          # auth as service account
          gcloud auth activate-service-account --key-file=sa.json
          if [ $? -ne 0 ] ; then
            echo "Gcloud auth failed!"
            exit 1
          fi
          # get bearer token and set it to a specific env var that
          #   subsequent steps expect.  bearer token good for 1 hour
          GOOGLE_OAUTH_ACCESS_TOKEN=$(gcloud auth print-access-token)
          if [ -z "${GOOGLE_OAUTH_ACCESS_TOKEN}" ] ; then
            echo "Generating Gcloud access token failed"
            exit 1
          fi
          echo ::add-mask::${GOOGLE_OAUTH_ACCESS_TOKEN}
          echo "GOOGLE_OAUTH_ACCESS_TOKEN=${GOOGLE_OAUTH_ACCESS_TOKEN}" >> $GITHUB_ENV

      - name: Pre-Build
        run: USER='Automated Release Action' make ${MODULES} TARGET=prebuild

      - name: Lint
        run: USER='Automated Release Action' make ${MODULES} TARGET=lint

      - name: Build
        run: USER='Automated Release Action' make ${MODULES} TARGET=build

      - name: Unit Test
        run: USER='Automated Release Action' make ${MODULES} TARGET=unit

      - name: Integration Test
        env:
          WFL_POSTGRES_USERNAME: postgres
          WFL_POSTGRES_PASSWORD: postgres
        run: USER='Automated Release Action' make ${MODULES} TARGET=integration

      - name: Images
        run: USER='Automated Release Action' make ${MODULES} TARGET=images

      - name: tag-and-push-images
        run: ./ops/cli.py tag-and-push-images
